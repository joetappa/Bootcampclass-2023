Here are 5 common k8s failures and how to fix them 🛠️

𝟭) 𝗜𝗺𝗮𝗴𝗲-𝗽𝘂𝗹𝗹 𝗯𝗮𝗰𝗸 𝗼𝗳𝗳 ~  Check for 𝙄𝙢𝙖𝙜𝙚 𝙥𝙪𝙡𝙡 𝙥𝙤𝙡𝙞𝙘𝙮 , 𝙥𝙚𝙧𝙢𝙞𝙨𝙨𝙞𝙤𝙣 𝙩𝙤 𝙥𝙪𝙡𝙡 𝙛𝙧𝙤𝙢 𝙧𝙚𝙥𝙤𝙨𝙞𝙩𝙤𝙧𝙮,𝙘𝙤𝙧𝙧𝙚𝙘𝙩       𝙞𝙢𝙖𝙜𝙚 𝙣𝙖𝙢𝙚 𝙖𝙡𝙤𝙣𝙜 𝙬𝙞𝙩𝙝 𝙩𝙖𝙜.

𝙐𝙨𝙚𝙛𝙪𝙡 𝙘𝙤𝙢𝙢𝙖𝙣𝙙𝙨 
  Kubectl describe po <podname>
  Kubectl get po <podname>
  Kubectl apply -f <deployment file name>


2)  𝘾𝙧𝙖𝙨𝙝-𝙇𝙤𝙤𝙥 𝙗𝙖𝙘𝙠 𝙤𝙛𝙛~ Check for 𝘾𝙤𝙧𝙧𝙚𝙘𝙩 𝙞𝙢𝙖𝙜𝙚 𝙣𝙖𝙢𝙚 𝙖𝙡𝙤𝙣𝙜 𝙬𝙞𝙩𝙝 𝙩𝙖𝙜 , 𝙚𝙣𝙤𝙪𝙜𝙝 𝙧𝙚𝙨𝙤𝙪𝙧𝙘𝙚 𝙘𝙤𝙣𝙨𝙩𝙧𝙖𝙞𝙣𝙩𝙨,𝙢𝙞𝙨𝙘𝙤𝙣𝙛𝙞𝙜𝙪𝙧𝙖𝙩𝙞𝙤𝙣 𝙤𝙛 𝙚𝙣𝙫𝙞𝙧𝙤𝙣𝙢𝙚𝙣𝙩 𝙫𝙖𝙧𝙞𝙖𝙗𝙡𝙚𝙨 , 𝙖𝙥𝙥𝙡𝙞𝙘𝙖𝙩𝙞𝙤𝙣 𝙛𝙖𝙞𝙡𝙪𝙧𝙚 𝙗𝙚𝙘𝙖𝙪𝙨𝙚 𝙤𝙛 ( 𝙛𝙖𝙞𝙡 𝙩𝙤 𝙗𝙪𝙞𝙡𝙙 𝙟𝙖𝙧 𝙛𝙞𝙡𝙚𝙨 , 𝙞𝙨𝙨𝙪𝙚𝙨 𝙬𝙝𝙞𝙡𝙚 𝙗𝙪𝙞𝙡𝙙𝙞𝙣𝙜 𝙙𝙤𝙘𝙠𝙚𝙧 𝙞𝙢𝙖𝙜𝙚.

𝙐𝙨𝙚𝙛𝙪𝙡 𝙘𝙤𝙢𝙢𝙖𝙣𝙙𝙨  
  Kubectl describe po <podname>
  Kubectl logs <podname>
 Also to check if enough resources are allocated (memory) 


3) 𝙁𝙖𝙞𝙡𝙪𝙧𝙚 𝙬𝙞𝙩𝙝 𝙀𝙭𝙞𝙩 𝙘𝙤𝙙𝙚 1~ Check for 𝘼𝙥𝙥𝙡𝙞𝙘𝙖𝙩𝙞𝙤𝙣 𝙘𝙤𝙙𝙚 𝙘𝙧𝙖𝙨𝙝𝙚𝙨 , 𝙞𝙣𝙘𝙤𝙧𝙧𝙚𝙘𝙩 𝙚𝙣𝙫𝙞𝙧𝙤𝙣𝙢𝙚𝙣𝙩 𝙫𝙖𝙧𝙞𝙖𝙗𝙡𝙚𝙨, 𝙞𝙣𝙨𝙪𝙛𝙛𝙞𝙘𝙞𝙚𝙣𝙩 𝙛𝙞𝙡𝙚 𝙥𝙚𝙧𝙢𝙞𝙨𝙨𝙞𝙤𝙣𝙨.


𝙐𝙨𝙚𝙛𝙪𝙡 𝙘𝙤𝙢𝙢𝙖𝙣𝙙𝙨  
  Kubectl logs <podname>
  Kubectl get po <podname>
  Kubectl apply -f <deployment file name>
Lookout for any exceptions in logs /missing variables at code level as well .


4) 𝙁𝙖𝙞𝙡𝙪𝙧𝙚 𝙬𝙞𝙩𝙝 𝙀𝙭𝙞𝙩 𝙘𝙤𝙙𝙚125~ Check for  𝙞𝙣𝙘𝙤𝙧𝙧𝙚𝙘𝙩 𝙛𝙞𝙡𝙚 𝙥𝙚𝙧𝙢𝙞𝙨𝙨𝙞𝙤𝙣𝙨 , 𝙚𝙭𝙘𝙚𝙥𝙩𝙞𝙤𝙣𝙨 𝙙𝙪𝙧𝙞𝙣𝙜 𝙗𝙤𝙤𝙩𝙞𝙣𝙜 𝙪𝙥 𝙤𝙛 𝙥𝙤𝙙

𝙐𝙨𝙚𝙛𝙪𝙡 𝙘𝙤𝙢𝙢𝙖𝙣𝙙𝙨 
  Kubectl logs <podname>
  Kubectl describe po <podname>

5) 𝙋𝙤𝙙/𝙉𝙤𝙙𝙚 𝙉𝙤𝙩 𝙍𝙚𝙖𝙙𝙮 ~ Check for 𝙉𝙚𝙩𝙬𝙤𝙧𝙠 𝘾𝙤𝙣𝙣𝙚𝙘𝙩𝙞𝙫𝙞𝙩𝙮 , 𝙚𝙣𝙤𝙪𝙜𝙝 𝙧𝙚𝙨𝙤𝙪𝙧𝙘𝙚 𝙖𝙡𝙡𝙤𝙘𝙖𝙩𝙞𝙤𝙣 ,𝙪𝙣𝙝𝙚𝙖𝙡𝙩𝙝𝙮 𝙥𝙧𝙤𝙘𝙚𝙨𝙨𝙚𝙨

𝙐𝙨𝙚𝙛𝙪𝙡 𝙘𝙤𝙢𝙢𝙖𝙣𝙙𝙨 
  Kubectl logs <podname>
  Kubectl get po <podname> and check for its state 
Increase system resource usage

##Troubleshooting in Kubernetes## 
 25 Examples With Commands 

1. Error: Unable to connect to the cluster 
o Troubleshooting: 
▪ Check kubeconfig file for correct cluster information. 
▪ Verify network connectivity to the cluster. 
o Example Commands: 
kubectl config view 
kubectl cluster-info 

2. Error: Pod stuck in Pending state 
o Troubleshooting: 
▪ Check events for the pod using kubectl describe pod. 
▪ Inspect the pod's YAML for resource constraints or affinity 
issues. 
o Example Commands: 
kubectl describe pod <pod-name> 
kubectl get events --namespace <namespace> 

3. Error: Insufficient resources to schedule pod 
Troubleshooting: 
▪ Check resource requests and limits in the pod specification. 
▪ Verify node resources using kubectl describe node. 
o Example Commands: 
kubectl describe pod <pod-name> 
kubectl describe node <node-name> 

4. Error: ImagePullBackOff 
o Troubleshooting: 
▪ Verify the image name and availability. 
▪ Check image pull credentials using kubectl describe pod. 
o Example Commands: 
kubectl describe pod <pod-name> 
kubectl get pods --namespace <namespace> 
o=jsonpath='{.items[*].status.containerStatuses[*].state}' 

5. Error: CrashLoopBackOff 
o Troubleshooting: 
▪ Check container logs for details on the crash. 
▪ Inspect pod events using kubectl describe pod. 
o Example Commands: 
kubectl logs <pod-name> <container-name> 
kubectl describe pod <pod-name> 

6. Error: Unauthorized access 
o Troubleshooting: 
▪ Verify RBAC permissions for the user. 
▪ Check kubeconfig for correct credentials. 
o Example Commands: 
kubectl auth can-i --list 
kubectl config view 

7. Error: ConfigMap not updating in the pod 
o Troubleshooting: 
▪ Check if the ConfigMap is updated. 
▪ Verify that the pod is configured to use the latest version. 
Example Commands: 
kubectl get configmap <configmap-name> -o yaml 
kubectl describe pod <pod-name> 

8. Error: Service not reachable 
o Troubleshooting: 
▪ Check service endpoints using kubectl describe service. 
▪ Verify network policies and firewall rules. 
o Example Commands: 
kubectl describe service <service-name> 
kubectl get networkpolicies 

9. Error: Node not ready 
o Troubleshooting: 
▪ Check node status with kubectl get nodes. 
▪ Review kubelet logs on the node for issues. 
o Example Commands: 
kubectl get nodes 
kubectl describe node <node-name> 

10. Error: PersistentVolumeClaim (PVC) pending 
o Troubleshooting: 
▪ Verify available storage in the cluster. 
▪ Check storage class and provisioner. 
o Example Commands: 
kubectl get pvc 
kubectl describe storageclass 

11. Error: VolumeMounts not working in pod 
o Troubleshooting: 
▪ Check pod's YAML for correct volume mounts. 
▪ Verify if the volume exists and is accessible. 
o Example Commands: 
kubectl describe pod <pod-name> 
kubectl get pv 

12. Error: Pod Security Policies (PSP) blocking pod 
o Troubleshooting: 
▪ Check PSP rules and RBAC for the pod. 
▪ Inspect pod events using kubectl describe pod. 
o Example Commands: 
kubectl get psp 
kubectl describe pod <pod-name> 

13. Error: ServiceAccount permissions 
o Troubleshooting: 
▪ Verify ServiceAccount permissions using kubectl auth can-i. 
▪ Check RBAC roles and role bindings. 
o Example Commands: 
kubectl auth can-i --list -
as=system:serviceaccount:<namespace>:<serviceaccount-name> 
kubectl get roles,rolebindings --namespace <namespace> 

14. Error: NodeSelector not working 
o Troubleshooting: 
▪ Check pod's YAML for correct node selector. 
▪ Verify that nodes have the required labels. 
o Example Commands: 
kubectl describe pod <pod-name> 
kubectl get nodes --show-labels 

15. Error: Ingress not routing traffic 
o Troubleshooting: 
▪ Check Ingress resource for correct backend services. 
▪ Verify that the Ingress controller is running. 
o Example Commands: 
kubectl describe ingress <ingress-name> 
kubectl get pods --namespace <ingress-controller-namespace> 

16. Error: Unable to scale deployment 
o Troubleshooting: 
▪ Verify available resources in the cluster. 
▪ Check replica count in the deployment specification. 
o Example Commands: 
kubectl get deployments 
kubectl describe deployment <deployment-name> 

17. Error: Custom Resource Definition (CRD) not creating resources 
o Troubleshooting: 
▪ Check CRD definition for correct syntax. 
▪ Verify controller logs for errors. 
o Example Commands: 
kubectl get crd 
kubectl describe crd <crd-name> 

18. Error: Pod in Terminating state 
o Troubleshooting: 
▪ Check for stuck finalizers in pod metadata. 
▪ Force delete pod using kubectl delete pod --grace-period=0. 
o Example Commands: 
kubectl get pods --all-namespaces --field
selector=status.phase=Terminating 
kubectl delete pod <pod-name> --grace-period=0 –force 

19. Error: Resource quota exceeded 
o Troubleshooting: 
▪ Check resource quotas for the namespace. 
▪ Verify resource usage in the namespace. 
o Example Commands: 
kubectl describe quota --namespace <namespace> 
kubectl top pods --namespace <namespace> 

20. Error: Rolling update stuck or not progressing 
o Troubleshooting: 
▪ Check rollout status using kubectl rollout status. 
▪ Verify image versions in the deployment. 
o Example Commands: 
kubectl rollout status deployment <deployment-name> 
kubectl set image deployment/<deployment-name> <container
name>=<new-image> 

21. Error: Node draining or cordoning 
o Troubleshooting: 
▪ Check node conditions and events. 
▪ Use kubectl drain with caution. 
o Example Commands: 
kubectl get nodes 
kubectl describe node <node-name> 
kubectl drain <node-name> --ignore-daemonsets 

22. Error: Resource creation timeout 
o Troubleshooting: 
▪ Check for issues with the API server. 
▪ Verify network connectivity to the API server. 
o Example Commands: 
kubectl get events --sort-by='.metadata.creationTimestamp' 
kubectl describe pod <pod-name> 

23. Error: Pod stuck in ContainerCreating state 
o Troubleshooting: 
▪ Check container runtime logs on the node. 
▪ Inspect kubelet logs for errors. 
o Example Commands: 
kubectl get pods 
kubectl describe pod <pod-name> 

24. Error: Invalid YAML syntax 
o Troubleshooting: 
▪ Validate YAML syntax using online tools or linters. 
▪ Check for indentation and formatting issues. 
o Example Commands: 
kubectl apply -f <file.yaml> --dry-run=client 

25. Error: etcd cluster issues 
o Troubleshooting: 
▪ Check etcd logs for errors. 
▪ Verify etcd cluster health. 
o Example Commands: 
kubectl get events --all-namespaces --field
selector=involvedObject.kind=Pod,involvedObject.name=etcd 
kubectl exec -it etcd-pod-name --namespace kube-system -- sh 
etcdctl member list 
etcdctl cluster-health 

Remember to replace placeholders like <pod-name>, <namespace>, <deployment-name>, 
etc., with actual values specific to your environment. Additionally, exercise caution 
when using force deletion or draining nodes to avoid potential data loss or service 
disruption.


Kubernetes Commands 
Kubernetes (K8s) is a powerful container orchestration platform that helps automate 
the deployment, scaling, and management of containerized applications. Here is a list 
of 50 important Kubernetes commands along with brief explanations and examples: 

1. kubectl version 
o Display the Kubernetes client and server version. 
kubectl version 

2. kubectl cluster-info 
o Display cluster information, including the master and services. 
kubectl cluster-info 

3. kubectl get nodes 
o List all nodes in the cluster. 
kubectl get nodes 

4. kubectl get pods 
o List all pods in the default namespace. 
kubectl get pods 

5. kubectl get deployments 
o List all deployments in the default namespace. 
kubectl get deployments 

6. kubectl describe pod [pod_name] 
o Display detailed information about a specific pod. 
kubectl describe pod mypod 

7. kubectl logs [pod_name] 
o Display the logs of a specific pod. 
kubectl logs mypod 

8. kubectl exec -it [pod_name] -- /bin/sh 
o Start an interactive shell in a specific pod. 
kubectl exec -it mypod -- /bin/sh 

9. kubectl create deployment [name] --image=[image] 
o Create a deployment with a specified container image. 
kubectl create deployment myapp --image=myimage:tag 

10. kubectl expose deployment [name] --port=[port] --type=LoadBalancer 
o Expose a deployment as a service. 
kubectl expose deployment myapp --port=80 --type=LoadBalancer 

11. kubectl scale deployment [name] --replicas=[replica_count] 
o Scale the number of replicas for a deployment. 
kubectl scale deployment myapp --replicas=3 
12. kubectl get svc 
o List all services in the default namespace. 
kubectl get svc 

 13. kubectl delete pod [pod_name] 
o Delete a specific pod. 
kubectl delete pod mypod 

14. kubectl delete deployment [name] 
o Delete a deployment and its associated pods. 
kubectl delete deployment myapp 

15. kubectl apply -f [file] 
o Apply a configuration file to the cluster. 
kubectl apply -f myconfig.yaml 

16. kubectl get configmaps 
o List all ConfigMaps in the default namespace. 
kubectl get configmaps 

17. kubectl describe service [service_name] 
o Display detailed information about a specific service. 
kubectl describe service myservice 

18. kubectl get namespaces 
o List all namespaces in the cluster. 
kubectl get namespaces 

19. kubectl create namespace [namespace_name] 
o Create a new namespace. 
kubectl create namespace mynamespace 

20. kubectl get pods -n [namespace] 
o List all pods in a specific namespace. 
kubectl get pods -n mynamespace 

21. kubectl delete namespace [namespace_name] 
o Delete a namespace and all its resources. 
kubectl delete namespace mynamespace 

22. kubectl get services --sort-by=.metadata.name 
o List services and sort them by name. 
kubectl get services --sort-by=.metadata.name 

23. kubectl rollout status deployment [deployment_name] 
o Check the status of a deployment rollout. 
kubectl rollout status deployment myapp 

24. kubectl get pods --field-selector=status.phase=Running 
o List pods that are in the Running phase. 
kubectl get pods --field-selector=status.phase=Running 

25. kubectl get events --sort-by=.metadata.creationTimestamp 
o List events sorted by creation timestamp. 
kubectl get events --sort-by=.metadata.creationTimestamp 

26. kubectl create secret generic [secret_name] --from-literal=[key]=[value] 
o Create a generic secret from literal values. 
kubectl create secret generic mysecret --from-literal=username=admin -
from-literal=password=pass123 

27. kubectl get secrets 
o List all secrets in the default namespace. 
kubectl get secrets 

28. kubectl describe secret [secret_name] 
o Display detailed information about a specific secret. 
kubectl describe secret mysecret 

29. kubectl edit deployment [deployment_name] 
o Edit the YAML of a deployment interactively. 
kubectl edit deployment myapp 

30. kubectl get pods -o wide 
o List pods with additional details like node information. 
kubectl get pods -o wide 

31. kubectl get nodes -o custom
columns=NODE:.metadata.name,IP:.status.addresses[0].address 
o List nodes with custom output columns. 
kubectl get nodes -o custom
columns=NODE:.metadata.name,IP:.status.addresses[0].address 

32. kubectl top pods 
o Display resource usage (CPU and memory) of pods. 
kubectl top pods 

33. kubectl apply -f https://url-to-yaml-file 
o Apply a configuration file directly from a URL. 
kubectl apply -f https://raw.githubusercontent.com/example/myconfig.yaml 

34. kubectl get pods --selector=[label_key]=[label_value] 
o List pods with a specific label. 
kubectl get pods --selector=app=myapp 

35. kubectl get pods --field-selector=status.phase!=Running 
o List pods that are not in the Running phase. 
kubectl get pods --field-selector=status.phase!=Running 

36. kubectl rollout undo deployment [deployment_name] 
o Rollback a deployment to the previous version. 
kubectl rollout undo deployment myapp 

37. kubectl label pod [pod_name] [label_key]=[label_value] 
o Add a label to a specific pod. 
kubectl label pod mypod environment=production 

38. kubectl get componentstatuses 
o List the health of different cluster components. 
kubectl get componentstatuses 

39. kubectl describe node [node_name] 
Display detailed information about a specific node.  
kubectl describe node mynode  

40. kubectl rollout history deployment [deployment_name] 
o View the rollout history of a deployment. 
kubectl rollout history deployment myapp 

41. kubectl delete pod --selector=[label_key]=[label_value] 
o Delete pods with a specific label. 
kubectl delete pod --selector=app=myapp 

42. kubectl top nodes 
o Display resource usage (CPU and memory) of nodes. 
kubectl top nodes 

43. kubectl get pods --watch 
o Watch for changes to pods in real-time. 
kubectl get pods –watch 

44. kubectl rollout pause deployment [deployment_name] 
o Pause a deployment to prevent further rollouts. 
kubectl rollout pause deployment myapp 

45. kubectl rollout resume deployment [deployment_name] 
o Resume a paused deployment. 
kubectl rollout resume deployment myapp 

46. kubectl explain [resource] 
o Get information about a Kubernetes resource. 
kubectl explain pod 

47. kubectl get pods -o jsonpath='{.items[*].metadata.name}' 
o Extract specific information using JSONPath. 
kubectl get pods -o jsonpath='{.items[*].metadata.name}' 

48. kubectl apply --dry-run=client -f [file] 
o Dry run to validate a configuration file without applying it. 
kubectl apply --dry-run=client -f myconfig.yaml 

49. kubectl exec -it [pod_name] -- /bin/sh -c 'command' 
o Execute a command in a specific pod. 
kubectl exec -it mypod -- /bin/sh -c 'ls /app' 

50. kubectl get events --sort-by=.metadata.creationTimestamp -n [namespace] 
o List events sorted by creation timestamp in a specific namespace. 
kubectl get events --sort-by=.metadata.creationTimestamp -n mynamespace 

These commands cover a broad range of Kubernetes operations and are useful for 
managing and troubleshooting applications in a Kubernetes cluster. Note that some 
commands may require specific roles or permissions depending on your Kubernetes 
environment. 
